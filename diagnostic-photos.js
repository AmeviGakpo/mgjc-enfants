#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');

console.log('üîç Diagnostic des Photos - MGJC Enfants');
console.log('=========================================');
console.log('');

// Fonction pour analyser les donn√©es des enfants
async function analyserDonneesEnfants() {
    try {
        console.log('üìä Analyse des donn√©es des enfants...');
        
        // Lire le fichier de donn√©es
        const dataFile = path.join(__dirname, 'data', 'enfants.json');
        const data = await fs.readFile(dataFile, 'utf8');
        const enfants = JSON.parse(data);
        
        console.log(`üìà Total d'enfants: ${enfants.length}`);
        console.log('');
        
        // Analyser chaque enfant
        enfants.forEach((enfant, index) => {
            console.log(`${index + 1}. ${enfant.prenom} ${enfant.nom}`);
            console.log(`   üì∑ Photo: ${enfant.photoEnfant || 'Aucune photo'}`);
            
            if (enfant.photoEnfant) {
                // Analyser l'URL de la photo
                if (enfant.photoEnfant.startsWith('http')) {
                    console.log(`   ‚úÖ URL compl√®te`);
                } else if (enfant.photoEnfant.startsWith('/uploads/')) {
                    console.log(`   ‚ö†Ô∏è URL relative`);
                } else if (enfant.photoEnfant.startsWith('data:')) {
                    console.log(`   ‚úÖ Image base64`);
                } else {
                    console.log(`   ‚ùì Format inconnu`);
                }
            }
            console.log('');
        });
        
        // Statistiques
        const avecPhotos = enfants.filter(e => e.photoEnfant && e.photoEnfant !== 'https://via.placeholder.com/35x45.png?text=Photo').length;
        const sansPhotos = enfants.length - avecPhotos;
        
        console.log('üìä Statistiques:');
        console.log(`   ‚úÖ Avec photos: ${avecPhotos}`);
        console.log(`   ‚ùå Sans photos: ${sansPhotos}`);
        console.log(`   üìà Pourcentage: ${Math.round((avecPhotos / enfants.length) * 100)}%`);
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'analyse:', error.message);
    }
}

// Fonction pour v√©rifier les fichiers upload√©s
async function verifierFichiersUploads() {
    try {
        console.log('\nüìÅ V√©rification des fichiers upload√©s...');
        
        const uploadsDir = path.join(__dirname, 'uploads');
        
        try {
            const files = await fs.readdir(uploadsDir);
            console.log(`üìÇ Dossier uploads: ${files.length} fichiers`);
            
            files.forEach(file => {
                const filePath = path.join(uploadsDir, file);
                console.log(`   üìÑ ${file}`);
            });
            
        } catch (error) {
            console.log('‚ùå Dossier uploads non trouv√© ou vide');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification des uploads:', error.message);
    }
}

// Fonction pour nettoyer les URLs de photos
async function nettoyerUrlsPhotos() {
    try {
        console.log('\nüßπ Nettoyage des URLs de photos...');
        
        const dataFile = path.join(__dirname, 'data', 'enfants.json');
        const data = await fs.readFile(dataFile, 'utf8');
        const enfants = JSON.parse(data);
        
        let nettoyages = 0;
        
        const enfantsNettoyes = enfants.map(enfant => {
            if (enfant.photoEnfant) {
                const ancienneUrl = enfant.photoEnfant;
                
                // Nettoyer l'URL
                let nouvelleUrl = ancienneUrl;
                
                // Supprimer les param√®tres de cache
                nouvelleUrl = nouvelleUrl.split('?')[0];
                
                // S'assurer que c'est une URL relative pour les uploads
                if (nouvelleUrl.includes('/uploads/') && !nouvelleUrl.startsWith('http')) {
                    nouvelleUrl = nouvelleUrl;
                } else if (nouvelleUrl.includes('uploads/') && nouvelleUrl.startsWith('http')) {
                    // Extraire le chemin relatif
                    const match = nouvelleUrl.match(/\/uploads\/[^?]+/);
                    if (match) {
                        nouvelleUrl = match[0];
                        nettoyages++;
                    }
                }
                
                if (ancienneUrl !== nouvelleUrl) {
                    console.log(`   üîÑ ${enfant.prenom} ${enfant.nom}:`);
                    console.log(`      Avant: ${ancienneUrl}`);
                    console.log(`      Apr√®s: ${nouvelleUrl}`);
                    console.log('');
                }
                
                enfant.photoEnfant = nouvelleUrl;
            }
            return enfant;
        });
        
        // Sauvegarder les donn√©es nettoy√©es
        await fs.writeFile(dataFile, JSON.stringify(enfantsNettoyes, null, 2));
        
        console.log(`‚úÖ ${nettoyages} URLs nettoy√©es`);
        
    } catch (error) {
        console.error('‚ùå Erreur lors du nettoyage:', error.message);
    }
}

// Fonction principale
async function diagnosticComplet() {
    console.log('üöÄ D√©marrage du diagnostic...\n');
    
    // Analyser les donn√©es
    await analyserDonneesEnfants();
    
    // V√©rifier les fichiers
    await verifierFichiersUploads();
    
    // Nettoyer les URLs
    await nettoyerUrlsPhotos();
    
    console.log('\n‚úÖ Diagnostic termin√© !');
    console.log('\nüí° Recommandations:');
    console.log('   1. V√©rifiez que toutes les photos sont bien upload√©es');
    console.log('   2. Assurez-vous que les URLs sont coh√©rentes');
    console.log('   3. Testez le chargement des photos pour chaque enfant');
    console.log('   4. Videz le cache du navigateur si n√©cessaire');
}

// D√©marrer le diagnostic
diagnosticComplet().catch(console.error); 