#!/bin/bash

echo "üöÄ D√©ploiement Rapide MGJC Enfants"
echo "===================================="
echo ""

# Fonction pour afficher l'aide
show_help() {
    echo "Usage: ./quick-deploy.sh [PLATFORM] [OPTIONS]"
    echo ""
    echo "PLATFORMS:"
    echo "  heroku    - D√©ployer sur Heroku"
    echo "  railway   - D√©ployer sur Railway"
    echo "  render    - D√©ployer sur Render"
    echo "  render    - D√©ployer sur Render"
    echo "  vps       - D√©ployer sur VPS"
    echo ""
    echo "OPTIONS:"
    echo "  --help    - Afficher cette aide"
    echo "  --update-url <URL> - Mettre √† jour l'URL du serveur"
    echo ""
    echo "EXEMPLES:"
    echo "  ./quick-deploy.sh heroku"
    echo "  ./quick-deploy.sh railway --update-url https://mgjc-enfants.railway.app/api"
    echo "  ./quick-deploy.sh vercel"
}

# Fonction pour d√©ployer sur Heroku
deploy_heroku() {
    echo "üöÄ D√©ploiement sur Heroku..."
    
    # V√©rifier si Heroku CLI est install√©
    if ! command -v heroku &> /dev/null; then
        echo "‚ùå Heroku CLI n'est pas install√©"
        echo "üì• Installez-le depuis: https://devcenter.heroku.com/articles/heroku-cli"
        return 1
    fi
    
    # V√©rifier si l'utilisateur est connect√©
    if ! heroku auth:whoami &> /dev/null; then
        echo "üîê Connexion √† Heroku..."
        heroku login
    fi
    
    # Cr√©er l'application si elle n'existe pas
    if [ -z "$HEROKU_APP_NAME" ]; then
        HEROKU_APP_NAME="mgjc-enfants-$(date +%s)"
    fi
    
    echo "üì¶ Cr√©ation de l'application: $HEROKU_APP_NAME"
    heroku create $HEROKU_APP_NAME
    
    # Configurer les variables d'environnement
    heroku config:set NODE_ENV=production
    heroku config:set PORT=3000
    
    # D√©ployer
    echo "üöÄ D√©ploiement en cours..."
    git add .
    git commit -m "Deploy to Heroku"
    git push heroku main
    
    # Ouvrir l'application
    heroku open
    
    echo "‚úÖ D√©ploiement Heroku termin√©!"
    echo "üåê URL: https://$HEROKU_APP_NAME.herokuapp.com"
}

# Fonction pour d√©ployer sur Railway
deploy_railway() {
    echo "üöÇ D√©ploiement sur Railway..."
    
    # V√©rifier si Railway CLI est install√©
    if ! command -v railway &> /dev/null; then
        echo "‚ùå Railway CLI n'est pas install√©"
        echo "üì• Installez-le avec: npm install -g @railway/cli"
        return 1
    fi
    
    # Se connecter √† Railway
    railway login
    
    # D√©ployer
    echo "üöÄ D√©ploiement en cours..."
    railway up
    
    echo "‚úÖ D√©ploiement Railway termin√©!"
    echo "üåê V√©rifiez votre dashboard Railway pour l'URL"
}

# Fonction pour d√©ployer sur Render
deploy_render() {
    echo "‚ö° D√©ploiement sur Render..."
    
    echo "üìã Instructions pour Render:"
    echo "1. Aller sur https://render.com"
    echo "2. Se connecter avec GitHub"
    echo "3. 'New +' ‚Üí 'Web Service'"
    echo "4. Connecter votre repository"
    echo "5. Configuration automatique"
    
    echo "‚úÖ Instructions Render affich√©es!"
}

# Fonction pour d√©ployer sur Render
deploy_render() {
    echo "üé® D√©ploiement sur Render..."
    
    echo "üìã Instructions pour Render:"
    echo "1. Allez sur https://render.com"
    echo "2. Cr√©ez un compte et connectez votre GitHub"
    echo "3. Cliquez sur 'New' > 'Web Service'"
    echo "4. S√©lectionnez votre repository"
    echo "5. Configurez:"
    echo "   - Name: mgjc-enfants"
    echo "   - Environment: Node"
    echo "   - Build Command: npm install"
    echo "   - Start Command: npm start"
    echo "6. Cliquez sur 'Create Web Service'"
    echo ""
    echo "‚úÖ Suivez ces instructions pour d√©ployer sur Render"
}

# Fonction pour d√©ployer sur VPS
deploy_vps() {
    echo "üåê D√©ploiement sur VPS..."
    
    echo "üìã Instructions pour VPS:"
    echo "1. Connectez-vous √† votre VPS:"
    echo "   ssh root@votre-ip"
    echo ""
    echo "2. Installez Node.js:"
    echo "   curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -"
    echo "   sudo apt-get install -y nodejs"
    echo ""
    echo "3. Installez PM2:"
    echo "   npm install -g pm2"
    echo ""
    echo "4. Clonez le projet:"
    echo "   git clone https://github.com/votre-repo/mgjc-enfants.git"
    echo "   cd mgjc-enfants"
    echo ""
    echo "5. Installez les d√©pendances:"
    echo "   npm install"
    echo ""
    echo "6. D√©marrez avec PM2:"
    echo "   pm2 start ecosystem.config.js --env production"
    echo "   pm2 startup"
    echo "   pm2 save"
    echo ""
    echo "‚úÖ Suivez ces instructions pour d√©ployer sur VPS"
}

# Fonction pour mettre √† jour l'URL
update_server_url() {
    local url=$1
    echo "üîß Mise √† jour de l'URL du serveur: $url"
    
    if node update-server-url.js "$url"; then
        echo "‚úÖ URL mise √† jour avec succ√®s!"
    else
        echo "‚ùå Erreur lors de la mise √† jour de l'URL"
        return 1
    fi
}

# Traitement des arguments
PLATFORM=""
UPDATE_URL=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            show_help
            exit 0
            ;;
        --update-url)
            UPDATE_URL="$2"
            shift 2
            ;;
        heroku|railway|render|vps)
            PLATFORM="$1"
            shift
            ;;
        *)
            echo "‚ùå Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# V√©rifier qu'une plateforme est sp√©cifi√©e
if [ -z "$PLATFORM" ]; then
    echo "‚ùå Veuillez sp√©cifier une plateforme"
    show_help
    exit 1
fi

# Mettre √† jour l'URL si sp√©cifi√©e
if [ -n "$UPDATE_URL" ]; then
    update_server_url "$UPDATE_URL"
fi

# D√©ployer selon la plateforme
case $PLATFORM in
    heroku)
        deploy_heroku
        ;;
    railway)
        deploy_railway
        ;;

    render)
        deploy_render
        ;;
    vps)
        deploy_vps
        ;;
    *)
        echo "‚ùå Plateforme inconnue: $PLATFORM"
        show_help
        exit 1
        ;;
esac

echo ""
echo "üéâ D√©ploiement termin√©!"
echo "üìñ Consultez GUIDE_DEPLOIEMENT.md pour plus de d√©tails" 